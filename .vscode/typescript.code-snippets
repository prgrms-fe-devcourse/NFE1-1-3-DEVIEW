{
  "Axios Request Function": {
    "prefix": "api-req",
    "body": [
      "import { ErrorResponse } from '@customTypes/errorResponse';",
      "import { axiosInstance } from '@services/axiosInstance';",
      "import axios, { AxiosError } from 'axios';",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}RequestProps = {",
      "  $0",
      "};",
      "",
      "type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ResponseProps = {",
      "",
      "};",
      "",
      "export async function ${2:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}}(",
      "  req: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}RequestProps",
      "): Promise<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ResponseProps> {",
      "  try {",
      "    const response = await axiosInstance.post<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}ResponseProps>(",
      "      `/${3:${endpoint}}`,",
      "      req",
      "    );",
      "    return response.data;",
      "  } catch (error) {",
      "    if (axios.isAxiosError(error)) {",
      "      const axiosError = error as AxiosError<ErrorResponse>;",
      "      if (axiosError.response) {",
      "        console.error('${4:${ErrorMessage}}', axiosError.response.data);",
      "        throw new Error(axiosError.response.data.message || '요청 실패');",
      "      } else if (axiosError.request) {",
      "        console.error('요청 에러:', axiosError.request);",
      "        throw new Error('서버에 연결할 수 없습니다. 네트워크를 확인해 주세요.');",
      "      }",
      "    }",
      "    console.error('예상치 못한 에러 발생:', error);",
      "    throw new Error('예상치 못한 에러가 발생했습니다. 다시 시도해 주세요.');",
      "  }",
      "}"
    ],
    "description": "Axios request function template with error handling"
  }
}
